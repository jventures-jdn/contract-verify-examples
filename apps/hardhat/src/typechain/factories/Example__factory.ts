/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Example, ExampleInterface } from "../Example";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600781526020017f4578616d706c6500000000000000000000000000000000000000000000000000815250600090816200004a9190620003ae565b506040518060400160405280600281526020017f455800000000000000000000000000000000000000000000000000000000000081525060019081620000919190620003ae565b50620f4240600255348015620000a657600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000495565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b657607f821691505b602082108103620001cc57620001cb6200016e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001f7565b620002428683620001f7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200028f6200028962000283846200025a565b62000264565b6200025a565b9050919050565b6000819050919050565b620002ab836200026e565b620002c3620002ba8262000296565b84845462000204565b825550505050565b600090565b620002da620002cb565b620002e7818484620002a0565b505050565b5b818110156200030f5762000303600082620002d0565b600181019050620002ed565b5050565b601f8211156200035e576200032881620001d2565b6200033384620001e7565b8101602085101562000343578190505b6200035b6200035285620001e7565b830182620002ec565b50505b505050565b600082821c905092915050565b6000620003836000198460080262000363565b1980831691505092915050565b60006200039e838362000370565b9150826002028217905092915050565b620003b98262000134565b67ffffffffffffffff811115620003d557620003d46200013f565b5b620003e182546200019d565b620003ee82828562000313565b600060209050601f83116001811462000426576000841562000411578287015190505b6200041d858262000390565b8655506200048d565b601f1984166200043686620001d2565b60005b82811015620004605784890151825560018201915060208501945060208101905062000439565b868310156200048057848901516200047c601f89168262000370565b8355505b6001600288020188555050505b505050505050565b61081f80620004a56000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ee57806395d89b411461010c578063a9059cbb1461012a578063f8a8fd6d146101465761007d565b806306fdde031461008257806318160ddd146100a057806370a08231146100be575b600080fd5b61008a610150565b604051610097919061050a565b60405180910390f35b6100a86101de565b6040516100b59190610545565b60405180910390f35b6100d860048036038101906100d391906105c3565b6101e4565b6040516100e59190610545565b60405180910390f35b6100f661022d565b60405161010391906105ff565b60405180910390f35b610114610253565b604051610121919061050a565b60405180910390f35b610144600480360381019061013f9190610646565b6102e1565b005b61014e610478565b005b6000805461015d906106b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610189906106b5565b80156101d65780601f106101ab576101008083540402835291602001916101d6565b820191906000526020600020905b8154815290600101906020018083116101b957829003601f168201915b505050505081565b60025481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054610260906106b5565b80601f016020809104026020016040519081016040528092919081815260200182805461028c906106b5565b80156102d95780601f106102ae576101008083540402835291602001916102d9565b820191906000526020600020905b8154815290600101906020018083116102bc57829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035a90610732565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103b29190610781565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461040891906107b5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161046c9190610545565b60405180910390a35050565b565b600081519050919050565b600082825260208201905092915050565b60005b838110156104b4578082015181840152602081019050610499565b60008484015250505050565b6000601f19601f8301169050919050565b60006104dc8261047a565b6104e68185610485565b93506104f6818560208601610496565b6104ff816104c0565b840191505092915050565b6000602082019050818103600083015261052481846104d1565b905092915050565b6000819050919050565b61053f8161052c565b82525050565b600060208201905061055a6000830184610536565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061059082610565565b9050919050565b6105a081610585565b81146105ab57600080fd5b50565b6000813590506105bd81610597565b92915050565b6000602082840312156105d9576105d8610560565b5b60006105e7848285016105ae565b91505092915050565b6105f981610585565b82525050565b600060208201905061061460008301846105f0565b92915050565b6106238161052c565b811461062e57600080fd5b50565b6000813590506106408161061a565b92915050565b6000806040838503121561065d5761065c610560565b5b600061066b858286016105ae565b925050602061067c85828601610631565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106cd57607f821691505b6020821081036106e0576106df610686565b5b50919050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b600061071c601183610485565b9150610727826106e6565b602082019050919050565b6000602082019050818103600083015261074b8161070f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061078c8261052c565b91506107978361052c565b92508282039050818111156107af576107ae610752565b5b92915050565b60006107c08261052c565b91506107cb8361052c565b92508282019050808211156107e3576107e2610752565b5b9291505056fea2646970667358221220eda068b672ab0242e729a29e37f7cc6cf33408a4531a6260a18fb4ddff70961964736f6c63430008120033";

type ExampleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExampleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Example__factory extends ContractFactory {
  constructor(...args: ExampleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Example> {
    return super.deploy(overrides || {}) as Promise<Example>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Example {
    return super.attach(address) as Example;
  }
  override connect(signer: Signer): Example__factory {
    return super.connect(signer) as Example__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExampleInterface {
    return new utils.Interface(_abi) as ExampleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Example {
    return new Contract(address, _abi, signerOrProvider) as Example;
  }
}
